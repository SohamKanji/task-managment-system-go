// Code generated by sqlc. DO NOT EDIT.
// source: tasks.sql

package db

import (
	"context"
	"time"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (due, status, priority, title, description) VALUES ($1, $2, $3, $4, $5)
RETURNING id, due, status, priority, title, description
`

type CreateTaskParams struct {
	Due         time.Time
	Status      string
	Priority    int64
	Title       string
	Description string
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Due,
		arg.Status,
		arg.Priority,
		arg.Title,
		arg.Description,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Due,
		&i.Status,
		&i.Priority,
		&i.Title,
		&i.Description,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, due, status, priority, title, description FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Due,
		&i.Status,
		&i.Priority,
		&i.Title,
		&i.Description,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, due, status, priority, title, description FROM tasks
ORDER BY id
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Due,
			&i.Status,
			&i.Priority,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET due = $2, status = $3, priority = $4, title = $5, description = $6
WHERE id = $1
RETURNING id, due, status, priority, title, description
`

type UpdateTaskParams struct {
	ID          int64
	Due         time.Time
	Status      string
	Priority    int64
	Title       string
	Description string
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.ID,
		arg.Due,
		arg.Status,
		arg.Priority,
		arg.Title,
		arg.Description,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Due,
		&i.Status,
		&i.Priority,
		&i.Title,
		&i.Description,
	)
	return i, err
}
